select *
from tblProduct
where ProductID NOT IN (
select productid
from tblPurchaseHistory
);

select Prod.ProductID, Prod.ProductDescription,
isnull(count(distinct Ord.PONumber), 0) as CountofPurchaseOrders,
isnull(cast(sum(QtyOrdered) as int), 0) as TotalQuantityOrdered,
isnull(max(Price), 0) as MaximumPricePaid,
isnull(min(Price), 0) as MinimumPricePaid,
isnull(cast(avg(Price) as decimal(10,2)), 0) as AveragePricePaid
from tblProduct Prod
left outer join tblPurchaseOrderLine Ord
on Ord.ProductID = Prod.ProductID
group by Prod.ProductID, Prod.ProductDescription
order by Prod.ProductID;

select 
ord.PONumber,
isnull(ven.VendorName, 'Unknown Vendor') as VendorName,
ord.ProductID,
prod.ProductDescription,
ord.DateNeeded,
ord.QtyOrdered as QuantityOrdered,
isnull(sum(rec.QtyReceived), 0) as TotalQtyReceived,
ord.QtyOrdered - isnull(sum(rec.QtyReceived), 0) as QtyLeftToReceive,
case 
    when isnull(sum(rec.QtyReceived), 0) = 0 then 'Not Received'
    when ord.QtyOrdered - sum(rec.QtyReceived) = 0 then 'Complete'
    when ord.QtyOrdered - sum(rec.QtyReceived) < 0 then 'Over Shipment'
    when ord.QtyOrdered - sum(rec.QtyReceived) > 0 then 'Partial Shipment'
end as ReceivingStatus
from tblPurchaseOrderLine as ord
inner join tblProduct as prod
on ord.ProductID = prod.ProductID
left outer join tblPurchaseOrder as pur
on ord.PONumber = pur.PONumber
left outer join tblVendor as ven
on pur.VendorID = ven.VendorID
left outer join tblReceiver as rec
on ord.POLineID = rec.POLineID
group by ord.PONumber, ven.VendorName, ord.ProductID, prod.ProductDescription, ord.DateNeeded, ord.QtyOrdered
order by ord.PONumber, ord.ProductID, ord.DateNeeded;

select max(pol.price) as HighestPriceAlpineSmallPot
from tblPurchaseOrderLine pol
inner join tblProduct p on pol.ProductID = p.ProductID
where p.ProductDescription = 'Alpine Small Pot';

select max(pol.price) as HighestPriceAlpineSmallPot
from tblPurchaseOrderLine pol
inner join tblProduct p on pol.ProductID = p.ProductID
where p.ProductDescription = 'Alpine Small Pot';

select distinct pol.PONumber, 
    pol.ProductID, 
    p.ProductDescription, 
    pol.Price
from tblPurchaseOrderLine pol
inner join tblProduct p on pol.ProductID = p.ProductID
where p.ProductDescription = 'Alpine Small Pot'
  and pol.Price = (
    select max(sub_pol.price)
    from tblPurchaseOrderLine sub_pol
    inner join tblProduct sub_p on sub_pol.ProductID = sub_p.ProductID
    where sub_p.ProductDescription = 'Alpine Small Pot'
  )
order by pol.PONumber;

select distinct pol.PONumber, 
                v.VendorName,
				pol.ProductID,
				p.ProductDescription, 
                pol.Price, 
                e.EmpLastName + ', ' + left(e.EmpFirstName, 1) + '.' as PurchaseEmployeeName,
                m.EmpLastName + ', ' + left(m.EmpFirstName, 1) + '.' as PurchaseEmployeeManagerName
from tblPurchaseOrderLine pol
inner join tblProduct p on pol.ProductID = p.ProductID
inner join tblPurchaseOrder po on pol.PONumber = po.PONumber
inner join tblEmployee e on po.BuyerEmpID = e.EmpID
left join tblEmployee m on e.EmpMgrID = m.EmpID
inner join tblVendor v on po.VendorID = v.VendorID
where p.ProductDescription = 'Alpine Small Pot'
  and pol.Price = (
    select max(sub_pol.price)
    from tblPurchaseOrderLine sub_pol
    inner join tblProduct sub_p on sub_pol.ProductID = sub_p.ProductID
    where sub_p.ProductDescription = 'Alpine Small Pot'
  )
order by pol.PONumber;

with EarliestPurchase as (
    select ph.ProductID,
           ph.DatePurchased,
           ph.Qty as QtyPurchased,
           ph.Price as PurchasePrice
    from tblPurchaseHistory ph
    where ph.DatePurchased = (
        select min(sub.DatePurchased)
        from tblPurchaseHistory sub
        where sub.ProductID = ph.ProductID
    )
)
select p.ProductID,
       p.ProductDescription,
       p.EOQ as ProductEOQ,
       ep.DatePurchased as EarliestPurchaseDate,
       isnull(ep.QtyPurchased, 0) as QtyPurchased,
       isnull(ep.PurchasePrice, 0) as PurchasePrice
from tblProduct p
left join EarliestPurchase ep on p.ProductID = ep.ProductID
order by p.ProductID;

create view vEarliestHistoricalPrice as
with EarliestPurchase as (
    select ph.ProductID,
           ph.DatePurchased as EarliestPurchaseDate,
           ph.Price as EarliestHistoricalPrice
    from tblPurchaseHistory ph
    where ph.DatePurchased = (
        select min(sub.DatePurchased)
        from tblPurchaseHistory sub
        where sub.ProductID = ph.ProductID
    )
)
select ep.ProductID,
       ep.EarliestPurchaseDate,
       ep.EarliestHistoricalPrice
from EarliestPurchase ep;

select pol.ProductID,
       p.ProductDescription,
       vep.EarliestPurchaseDate,
       po.PODatePlace as PODatePlaced,
       vep.EarliestHistoricalPrice,
       pol.Price as CurrentPrice,
       pol.PONumber,
       v.VendorName
from tblPurchaseOrderLine pol
inner join vEarliestHistoricalPrice vep on pol.ProductID = vep.ProductID
inner join tblProduct p on pol.ProductID = p.ProductID
inner join tblPurchaseOrder po on pol.PONumber = po.PONumber
inner join tblVendor v on po.VendorID = v.VendorID
where pol.Price > vep.EarliestHistoricalPrice * 1.25
  and vep.EarliestHistoricalPrice > 0
order by pol.ProductID, po.PODatePlace;
